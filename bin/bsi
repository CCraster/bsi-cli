#!/usr/bin/env node
const program = require('commander');
const chalk = require('chalk');
const path = require('path');
const cliName = process.env.CLI_NAME || 'bsi';
program.version(`${cliName}-cli ${require('../package').version}`).usage('<command> [options]');

program.command('create <app-name>', `create a new project by ${cliName}-cli`);

program
  .command('compress <file>')
  .description('compress html css js')
  .option('-o, --output <file>', 'Output file path (default STDOUT)')
  .action((fileName, cmd) => {
    const opts = cleanArgs(cmd);
    require('../lib/compress')(fileName, opts);
  });

program
  .command('date <time>')
  .description('format timestamps to Date or date to timestamps')
  .action((time) => {
    require('../lib/date')(time);
  });
program
  .command('serve [dir-name]')
  .description(`use ${chalk.cyan('Serve')} to run static file server`)
  .option('-p, --port <port>', 'which port to use', 9000)
  .action((name, cmd) => {
    const opts = cleanArgs(cmd);
    const dir = path.join(process.cwd(), name || '.');
    require('../lib/serve')(dir, opts);
  });
program
  .command('tree <file-name>')
  .description(`generate data to Tree`)
  .option('-l,--level <level>', 'Descend only level directories deep')
  .action((name, cmd) => {
    console.log(cmd);

    const opts = cleanArgs(cmd);
    const file = path.join(process.cwd(), name || '.');
    require('../lib/tree')(file, opts);
  });

program.arguments('<command>').action((cmd) => {
  program.outputHelp();
  console.log(`  ` + chalk.red(`Unknown command ${chalk.yellow(cmd)}.`));
  console.log();
});
//自定义帮助信息
program.on('--help', function () {
  console.log();
  console.log(
    `  Run ${chalk.cyan(`${cliName} <command> --help`)} for detailed usage of given command.`
  );
  console.log();
});

program.Command.prototype.missingArgument = function (...args) {
  this.outputHelp();
  console.log(`  ${chalk.red(`Missing required argument ${chalk.yellow(`<${args[0]}>`)}.`)}`);
  console.log();
  process.exit(1);
};
program.parse(process.argv);

function cleanArgs(cmd) {
  let args = {};
  cmd.options.forEach((i) => {
    let key = i.long.replace(/^--/, '');
    if (typeof cmd[key] !== 'function' && typeof cmd[key] !== 'undefined') {
      args[key] = cmd[key];
    }
  });
  return args;
}
