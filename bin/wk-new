#!/usr/bin/env node
const program = require('commander');
const chalk = require('chalk');
const path = require('path');
const ejs = require('ejs');
const fs = require('fs');
const fsp = fs.promises;
const fse = require('fs-extra');
const download = require('../lib/download');
const log = console.log;
const inquirer = require('inquirer');
const {Spinner} = require('../lib/spinner');

program.option('-o2, --output3 <file>', 'Output33 file path (default STDOUT)')
  .parse(process.argv);

const appName = program.args[0];

async function getAnswer () {
  return await inquirer.prompt([
    {
      type: 'list',
      name: 'framework',
      message: 'What framework do you want?',
      choices: [
        'Vue',
        'Vue-Component',
        'React',
        'React-Component',
        'Koa',
        'Express',
      ],
      prefix: '🐢',
    },
  ]);
}

async function getFilesInDir (dir) {
  dir = path.resolve(__dirname, dir);
  const files = [];
  const _getFiles = async function(_dir) {
    const _files = await fsp.readdir(_dir, {withFileTypes: true});
    for (const entry of _files) {
      const _path = path.resolve(_dir, entry.name);
      if (entry.isDirectory()) {
        await _getFiles(_path);
      } else {
        files.push(_path);
      }
    }
  };
  await _getFiles(dir);
  return files;
  
}

async function create () {
  //  const info = await getAnswer();
  const target = process.cwd();
  const templatePath = path.resolve(__dirname, `../template/Vue-Component`);
  const spinner = Spinner('复制模板文件中');
  spinner.start();
  try {
    const files = await getFilesInDir(templatePath);
    const targetDir = path.resolve(target, appName);
    const isExist = await fsp.stat(targetDir).catch(() => false);
    if (isExist) {
      await fse.remove(targetDir);
    }
    await fsp.mkdir(targetDir);
    for (let file of files) {
      const relativePath = path.relative(templatePath, file);
      const newPath = path.resolve(targetDir, relativePath);
      const fileStr = await render(file, {});
      await fse.ensureDir(path.dirname(newPath));
      await fsp.writeFile(newPath, fileStr, {encoding: 'utf-8'});
    }
    spinner.succeed();
    spinner.stopAndPersist('downloading template...');
    await download();
    spinner.succeed();
  }catch (e) {
    console.error(e);
  }
  
}

function render (file, data = {}) {
  return new Promise(( (resolve, reject) => {
    ejs.renderFile(file, data, function(err, str) {
      if (err) reject(err);
      resolve(str);
    });
  } ));
}

create().then(() => process.exit(-1));
